#!/usr/bin/env python3

"""
Copyright 2020 Ronald J. Nowling

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

import argparse
from collections import defaultdict
import intervaltree

def read_peaks(flname):
    peaks = defaultdict(lambda: intervaltree.IntervalTree())
    with open(flname) as fl:
        for ln in fl:
            cols = ln.split()
            chrom = cols[0]
            start = int(cols[1])
            end = int(cols[2])
            peak_name = chrom  + ":" + str(start) + "-" + str(end)
            
            # intervals are half-open so add 1 to ensure entire
            # peak region is covered (nucleotide positions are
            # discrete)
            peaks[chrom][start:end+1] = peak_name

    return peaks

def write_peaks(flname, trees):
    with open(flname, "w") as fl:
        for chrom, tree in trees.items():
            for interval in tree:
                fl.write(chrom)
                fl.write("\t")
                fl.write(str(interval.begin))
                fl.write("\t")
                fl.write(str(interval.end))
                fl.write("\n")

def trees_to_set(peak_trees):
    peak_set = set()
    for chrom, tree in peak_trees.items():
        for interval in tree:
            peak_set.add((chrom, interval.begin, interval.end))

    return peak_set

def merge_peaks(all_source_peaks, all_target_peaks):
    all_chroms = set(all_source_peaks.keys())
    all_chroms.update(all_target_peaks.keys())

    merged_peaks = dict()
    for chrom in all_chroms:
        if chrom in all_target_peaks and chrom in all_source_peaks:
            union = all_target_peaks[chrom].union(all_source_peaks[chrom])
            union.merge_overlaps()

            merged_peaks[chrom] = union
        elif chrom in all_target_peaks:
            merged_peaks[chrom] = all_target_peaks[chrom]
        elif chrom in all_source_peaks:
            merged_peaks[chrom] = all_source_peaks[chrom]

    return merged_peaks

def parse_args():
    parser = argparse.ArgumentParser()

    parser.add_argument("--source-peaks-fl",
                        type=str,
                        required=True)

    parser.add_argument("--target-peaks-fl",
                        type=str,
                        required=True)

    parser.add_argument("--output-peaks-fl",
                        type=str,
                        required=True)

    return parser.parse_args()

if __name__ == "__main__":
    args = parse_args()

    source_peaks = read_peaks(args.source_peaks_fl)
    target_peaks = read_peaks(args.target_peaks_fl)

    source_peaks_set = trees_to_set(source_peaks)
    target_peaks_set = trees_to_set(target_peaks)

    print("Read", len(source_peaks_set), "source peaks")
    print("Read", len(target_peaks_set), "target_peaks")
    
    merged_peaks = merge_peaks(source_peaks, target_peaks)

    print(len(trees_to_set(merged_peaks)), "merged peaks")

    write_peaks(args.output_peaks_fl,
                merged_peaks)
