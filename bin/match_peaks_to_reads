#!/usr/bin/env python3

"""
Copyright 2020 Ronald J. Nowling

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

import argparse
import os
import subprocess

def read_peaks(flname):
    peaks = []
    with open(flname) as fl:
        for ln in fl:
            cols = ln.split()
            chrom = cols[0]
            start = int(cols[1])
            end = int(cols[2])

            peaks.append((chrom, start, end))

    return peaks

def parse_args():
    parser = argparse.ArgumentParser()

    parser.add_argument("--bam-fl",
                        type=str,
                        required=True)

    parser.add_argument("--peaks-fl",
                        type=str,
                        required=True)

    parser.add_argument("--reads-fl",
                        type=str,
                        required=True)

    return parser.parse_args()

if __name__ == "__main__":
    args = parse_args()

    peaks = read_peaks(args.peaks_fl)
    print("Read", len(peaks), "peaks")

    print("Querying bam file")
    with open(args.reads_fl, "w") as outfl:
        for chrom, start, end in peaks:
            region = str(chrom) + ":" + str(start) + "-" + str(end)
            cmd = "samtools view %s %s | cut -f 1 | sort | uniq" % (args.bam_fl, region)
            print(cmd)
            result = subprocess.Popen(cmd,
                                      shell=True,
                                      stdout=subprocess.PIPE,
                                      universal_newlines=True)
            outs, errs = result.communicate()
            read_names = set(outs.split())
            print("Found", len(read_names), "reads")
            for name in read_names:
                outfl.write(region)
                outfl.write("\t")
                outfl.write(name)
                outfl.write("\n")

    
