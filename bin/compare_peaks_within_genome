#!/usr/bin/env python3

"""
Copyright 2020 Ronald J. Nowling

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

import argparse
from collections import defaultdict
import intervaltree

def read_peaks(flname):
    peaks = defaultdict(lambda: intervaltree.IntervalTree())
    with open(flname) as fl:
        for ln in fl:
            cols = ln.split()
            chrom = cols[0]
            start = int(cols[1])
            end = int(cols[2])
            peak_name = chrom  + ":" + str(start) + "-" + str(end)
            
            # intervals are half-open so add 1 to ensure entire
            # peak region is covered (nucleotide positions are
            # discrete)
            peaks[chrom][start:end+1] = peak_name

    return peaks

def trees_to_set(peak_trees):
    peak_set = set()
    for chrom, tree in peak_trees.items():
        for interval in tree:
            peak_set.add(interval.data)

    return peak_set

def find_matches(all_source_peaks, all_target_peaks):
    matched_source_peaks = set()
    matched_target_peaks = set()

    for chrom, source_peaks in all_source_peaks.items():
        if chrom in all_target_peaks:
            for source_interval in source_peaks:
                target_matches = all_target_peaks[chrom].overlap(source_interval.begin,
                                                                 source_interval.end)
                if len(target_matches) > 0:
                    matched_source_peaks.add(source_interval.data)

                    for target_interval in target_matches:
                        target_peak_name = target_interval.data
                        matched_target_peaks.add(target_peak_name)


    return matched_source_peaks, matched_target_peaks

def calculate_overlap(all_source_peaks, all_target_peaks):
    n_union_windows = 0
    n_intersection_windows = 0

    all_chroms = set(all_source_peaks.keys())
    all_chroms.update(all_target_peaks.keys())

    for chrom in all_chroms:
        if chrom in all_target_peaks and chrom in all_source_peaks:
            union = all_target_peaks[chrom].union(all_source_peaks[chrom])
            union.merge_overlaps()

            left = all_target_peaks[chrom].copy()
            right = all_source_peaks[chrom]

            for interval in left:
                matches = right.overlap(interval.begin, interval.end)
                if len(matches) > 0:
                    n_intersection_windows += 1

            n_union_windows += len(union)
        elif chrom in all_target_peaks:
            n_union_windows += len(all_target_peaks[chrom])
        elif chrom in all_source_peaks:
            n_union_windows += len(all_source_peaks[chrom])

    return n_union_windows, n_intersection_windows, n_intersection_windows / n_union_windows

def parse_args():
    parser = argparse.ArgumentParser()

    parser.add_argument("--source-peaks-fl",
                        type=str,
                        required=True)

    parser.add_argument("--target-peaks-fl",
                        type=str,
                        required=True)

    return parser.parse_args()

if __name__ == "__main__":
    args = parse_args()

    source_peaks = read_peaks(args.source_peaks_fl)
    target_peaks = read_peaks(args.target_peaks_fl)

    source_peaks_set = trees_to_set(source_peaks)
    target_peaks_set = trees_to_set(target_peaks)

    print("Read", len(source_peaks_set), "source peaks")
    print("Read", len(target_peaks_set), "target_peaks")
    
    matched_source_peaks, matched_target_peaks = find_matches(source_peaks,
                                                              target_peaks)


    intersection = source_peaks_set.intersection(matched_source_peaks)
    precision = 100. * len(intersection) / len(source_peaks_set)

    intersection = target_peaks_set.intersection(matched_target_peaks)
    recall = 100. * len(intersection) / len(target_peaks_set)

    print("Precision (source peaks):", precision)
    print("Recall (target peaks):", recall)

    n_union, n_intersection, overlap = calculate_overlap(source_peaks, target_peaks)

    print(n_union, "merged peaks")
    print(n_intersection, "intersecting peaks")
    print("Overlap:", 100. * overlap)
