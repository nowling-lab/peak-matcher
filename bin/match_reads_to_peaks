#!/usr/bin/env python3

"""
Copyright 2020 Ronald J. Nowling

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

import argparse
from collections import defaultdict
import intervaltree
import sys

def read_peak_reads(read_names_fl):
    peak_reads = defaultdict(set)
    with open(read_names_fl) as fl:
        for ln in fl:
            cols = ln.split()
            peak_name = cols[0]
            read_name = cols[1]
            peak_reads[read_name].add(peak_name)

    return peak_reads

def read_peaks(flname):
    peaks = defaultdict(lambda: intervaltree.IntervalTree())
    with open(flname) as fl:
        for ln in fl:
            cols = ln.split()
            chrom = cols[0]
            start = int(cols[1])
            end = int(cols[2])
            peak_name = chrom + ":" + str(start) + "-" + str(end)

            # intervals are half-open so add 1 to ensure entire
            # peak region is covered (nucleotide positions are
            # discrete)
            peaks[chrom][start:end+1] = peak_name
    return peaks

def parse_args():
    parser = argparse.ArgumentParser()

    parser.add_argument("--peak-reads-fl",
                        type=str,
                        required=True)

    parser.add_argument("--peaks-fl",
                        type=str,
                        required=True)

    parser.add_argument("--show-details",
                        action="store_true")

    return parser.parse_args()

if __name__ == "__main__":
    args = parse_args()

    peak_reads = read_peak_reads(args.peak_reads_fl)
    print(len(peak_reads), "read names loaded")

    target_peaks = read_peaks(args.peaks_fl)
    print("Read target peaks")

    total_target_peaks = set()
    for chrom, tree in target_peaks.items():
        for interval in tree:
            total_target_peaks.add(interval.data)
    print("Target peaks:", len(total_target_peaks))

    total_source_peaks = set()
    for read_name, peak_names in peak_reads.items():
        total_source_peaks.update(peak_names)
    print("Source peaks:", len(total_source_peaks))
    
    matched_target_peaks = set()
    matched_source_peaks = set()
    peak_matches = defaultdict(set)
    read_count = 0
    next_output = 1
    for ln in sys.stdin:
        cols = ln.split()
        read_name = cols[0]
        read_contig = cols[2]
        read_start = int(cols[3])
        read_length = len(cols[9])
        read_end = read_start + read_length

        read_count += 1
        if next_output == read_count:
            print("Read", read_count, "reads")
            next_output *= 2

        if read_contig in target_peaks and read_name in peak_reads:
            src_peak_names = peak_reads[read_name]
            target_matches = target_peaks[read_contig].overlap(read_start, read_end)

            if len(target_matches) > 0:
                matched_source_peaks.update(src_peak_names)
            
            for interval in target_matches:
                target_peak_name = interval.data
                matched_target_peaks.add(target_peak_name)
                #for src in src_peak_names:
                #    for target in target_peak_names:
                #        peak_matches[src].add(target)

    print("Done filtering input reads")

    intersection = matched_target_peaks.intersection(total_target_peaks)
    recall = 100. * len(intersection) / len(total_target_peaks)
    print("Recall:", recall)

    intersection = matched_source_peaks.intersection(total_source_peaks)
    precision = 100. * len(intersection) / len(total_source_peaks)
    print("Precision:", precision)
