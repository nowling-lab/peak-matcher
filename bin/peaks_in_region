#!/usr/bin/env python3

"""
Copyright 2020 Ronald J. Nowling

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

import argparse
from collections import defaultdict
import intervaltree

def read_peaks(flname):
    peaks = defaultdict(lambda: intervaltree.IntervalTree())
    with open(flname) as fl:
        for ln in fl:
            cols = ln.split()
            chrom = cols[0]
            start = int(cols[1])
            end = int(cols[2])
            
            # intervals are half-open so add 1 to ensure entire
            # peak region is covered (nucleotide positions are
            # discrete)
            peaks[chrom][start:end+1] = ln

    return peaks

def parse_args():
    parser = argparse.ArgumentParser()

    parser.add_argument("--input-peaks-fl",
                        type=str,
                        required=True)

    parser.add_argument("--output-peaks-fl",
                        type=str,
                        required=True)

    parser.add_argument("--window",
                        type=int,
                        nargs=2,
                        required=True)

    parser.add_argument("--chrom",
                        type=str,
                        required=True)

    return parser.parse_args()

if __name__ == "__main__":
    args = parse_args()

    peaks = read_peaks(args.input_peaks_fl)

    if args.chrom not in peaks:
        raise Exception("Could not find chromosome %s in %s" % \
                        (args.chrom, str(peaks.keys())))

    filtered_peaks = peaks[args.chrom].overlap(args.window[0],
                                               args.window[1])

    with open(args.output_peaks_fl, "w") as fl:
        for interval in filtered_peaks:
            fl.write(interval.data)
        
    
    
